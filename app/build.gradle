import com.android.build.gradle.internal.tasks.FinalizeBundleTask

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.kapt'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'io.sentry.android.gradle' version '3.12.0'
}

project.ext {
    versionEpoch = 3 // must NOT CHANGE, added for historical reasons
    versionMajor = 1
    versionMinor = 0
    versionPatch = 0
    versionOffset = 0

    versionMinSdk = 21
    versionCompileSdk = 34
    versionTargetSdk = 33

    applicationId = 'ai.ivira.app'
}

int generateVersionCode() {
    def offsetPart = "$versionOffset"
    def patchPart = String.format("%2d", versionPatch).replace(" ", "0")
    def minorPart = String.format("%2d", versionMinor).replace(" ", "0")
    def majorPart = String.format("%2d", versionMajor).replace(" ", "0")
    def epochPart = "$versionEpoch"

    return Integer.parseInt("$epochPart$majorPart$minorPart$patchPart$offsetPart")
}

String generateVersionName() {
    return "${project.ext.versionMajor}.${project.ext.versionMinor}.${project.ext.versionPatch}"
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sentry {
    includeProguardMapping = false
    autoUploadProguardMapping = false
}

android {
    namespace project.ext.applicationId
    compileSdk versionCompileSdk

    defaultConfig {
        applicationId project.ext.applicationId
        minSdk project.ext.versionMinSdk
        targetSdk project.ext.versionTargetSdk
        versionCode generateVersionCode()
        versionName generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        debug {
            File props = file(".signing-debug/signing.properties")
            File keystore = file(".signing-debug/debug.jks")
            if (props.exists()) {
                def signing = new Properties()
                props.withInputStream { signing.load(it) }
                if (signing.KEYSTORE_PASSWORD)
                    storePassword signing.getProperty('KEYSTORE_PASSWORD')
                if (signing.KEY_PASSWORD)
                    keyPassword signing.getProperty('KEY_PASSWORD')
                if (signing.KEY_ALIAS)
                    keyAlias signing.getProperty('KEY_ALIAS')
            }
            if (keystore.exists())
                storeFile keystore
        }
        release {
            File props = file(".signing/signing.properties")
            File keystore = file(".signing/release.jks")
            if (props.exists()) {
                def signing = new Properties()
                props.withInputStream { signing.load(it) }
                if (signing.KEYSTORE_PASSWORD)
                    storePassword signing.getProperty('KEYSTORE_PASSWORD')
                if (signing.KEY_PASSWORD)
                    keyPassword signing.getProperty('KEY_PASSWORD')
                if (signing.KEY_ALIAS)
                    keyAlias signing.getProperty('KEY_ALIAS')
            }
            if (keystore.exists())
                storeFile keystore
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        freeCompilerArgs += "-opt-in=androidx.compose.material.ExperimentalMaterialApi"
        freeCompilerArgs += "-opt-in=com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi"
        freeCompilerArgs += "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
        freeCompilerArgs += "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi"
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    // source is used to configure sentry, if changed that also must be changed! (specially source)
    flavorDimensions "source", "store"
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            dimension "source"
        }
        prod {
            dimension "source"
        }

        cafeBazaar {
            dimension "store"
            buildConfigField("String", "SHARE_URL", "\"https://cafebazaar.ir/app/ai.ivira.app\"")
        }

        myket {
            dimension "store"
            buildConfigField("String", "SHARE_URL", "\"https://myket.ir/app/ai.ivira.app\"")
        }

    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("myket") &&
                (names.contains("dev") || variant.buildType.name == "debug")
        ) {
            variant.ignore = true
        }
    }

    applicationVariants.all { variant ->
        // rename output files
        def artifactName = "Vira-v${generateVersionName()}(${variant.versionCode})-${variant.getFlavorName()}${variant.buildType.name.capitalize()}-g${getGitHash}"
        // rename apk
        variant.outputs.all {
            outputFileName = "${artifactName}.apk"
        }
        // rename bundle files
        tasks.named("sign${variant.name.capitalize()}Bundle", FinalizeBundleTask) {
            File file = finalBundleFile.asFile.get()
            File finalFile = new File(file.parentFile, "${artifactName}.aab")
            finalBundleFile.set(finalFile)
        }
    }

    ndkVersion = "24.0.8215888"
    externalNativeBuild {
        cmake {
            path = file("src/main/cpp/CMakeLists.txt")
            version = "3.22.1"
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation "androidx.core:core-splashscreen:1.0.1"

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2"
    implementation "androidx.lifecycle:lifecycle-process:2.6.2"

    // compose
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation 'androidx.compose.ui:ui:1.5.0'
    implementation 'androidx.compose.ui:ui-graphics:1.5.0'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.5.0'
    implementation "androidx.compose.foundation:foundation:1.5.0"
    implementation 'androidx.compose.material:material:1.5.0'
    implementation "androidx.compose.runtime:runtime:1.5.0"
    debugImplementation 'androidx.compose.ui:ui-tooling:1.5.0'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.5.0'
    implementation "androidx.compose.compiler:compiler:1.5.2"

    // accompanist
    implementation "com.google.accompanist:accompanist-navigation-material:0.32.0"
    implementation "com.google.accompanist:accompanist-permissions:0.32.0"


    // pager and indicators -accompanist
    implementation "com.google.accompanist:accompanist-pager:0.32.0"
    implementation "com.google.accompanist:accompanist-pager-indicators:0.32.0"

    //dataStore Preferences
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // hilt
    implementation "com.google.dagger:hilt-android:2.48"
    kapt "com.google.dagger:hilt-android-compiler:2.48"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"

    // coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Room
    implementation 'androidx.room:room-runtime:2.6.0-beta01'
    ksp 'androidx.room:room-compiler:2.6.0-beta01'
    implementation 'androidx.room:room-ktx:2.6.0-beta01'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'

    // Moshi Kotlin
    ksp 'com.squareup.moshi:moshi-kotlin-codegen:1.15.0'
    implementation 'com.squareup.moshi:moshi:1.15.0'

    // Util
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Date
    implementation 'com.github.samanzamani:PersianDate:1.6.1'

    //iText for pdf
    implementation 'com.itextpdf:itextpdf:5.5.13.1'
    implementation "com.airbnb.android:lottie-compose:6.1.0"

    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.27'

    // firebase
    implementation("com.google.firebase:firebase-analytics-ktx:19.0.0")
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.7'
    implementation "com.google.firebase:firebase-messaging:23.3.1"

    //EncryptedSharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    implementation("io.sentry:sentry-android:7.0.0")

    //ktor
    implementation 'io.ktor:ktor-client-core:2.3.5'
    implementation 'io.ktor:ktor-client-okhttp:2.3.5'

}